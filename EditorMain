<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mermaid Visual Editor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script type="module">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
        window.mermaid = mermaid;
    </script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .link { stroke: #9ca3af; stroke-width: 2px; fill: none; }
        .node rect { fill: white; stroke: #374151; stroke-width: 2px; rx: 8px; ry: 8px; transition: stroke 0.2s; }
        .node.selected rect { stroke: #3b82f6; stroke-width: 3px; }
        .node.linking-source rect { stroke: #f59e0b; stroke-width: 3px; }
        .node text { pointer-events: none; font-size: 14px; fill: #1f2937; }
        .arrowhead { fill: #9ca3af; }
        .linking-cursor { cursor: crosshair; }
        #visual-editor-svg {
            background-image: radial-gradient(#d1d5db 1px, transparent 0);
            background-size: 20px 20px;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="flex flex-col h-screen">
        <!-- Header -->
        <header class="bg-white shadow-md p-4 z-10">
            <h1 class="text-2xl font-bold text-gray-900">Mermaid Visual Editor</h1>
            <p class="text-sm text-gray-600">Click "Add Node" to start. To connect, click "Create Link", then click the source node, and then the target node.</p>
        </header>

        <!-- Main Content -->
        <div class="flex flex-grow overflow-hidden">
            <!-- Left Panel (Controls & Code) -->
            <div class="w-1/3 flex flex-col bg-white p-4 border-r border-gray-200 overflow-y-auto">
                <!-- Controls -->
                <div class="mb-6">
                    <h2 class="text-lg font-semibold mb-3 border-b pb-2">Controls</h2>
                    <div class="flex space-x-2">
                        <button id="add-node-btn" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                            Add Node
                        </button>
                        <button id="create-link-btn" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                            Create Link
                        </button>
                    </div>
                </div>

                <!-- Node Editor (hidden by default) -->
                <div id="node-editor" class="mb-6 hidden">
                    <h2 class="text-lg font-semibold mb-3 border-b pb-2">Edit Selected Node</h2>
                    <div class="space-y-3">
                        <div>
                            <label for="node-text" class="block text-sm font-medium text-gray-700">Node Text</label>
                            <input type="text" id="node-text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="node-id" class="block text-sm font-medium text-gray-700">Node ID (Unique)</label>
                            <input type="text" id="node-id" readonly class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 sm:text-sm">
                        </div>
                    </div>
                    <div class="mt-4">
                         <button id="delete-node-btn" class="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                            Delete Node
                        </button>
                    </div>
                </div>

                <!-- Mermaid Code Output -->
                <div class="flex-grow flex flex-col">
                    <h2 class="text-lg font-semibold mb-3 border-b pb-2">Generated Mermaid Code</h2>
                    <div class="relative flex-grow">
                        <textarea id="mermaid-code" class="w-full h-full p-2 border border-gray-300 rounded-md bg-gray-50 font-mono text-sm resize-none" readonly></textarea>
                        <button id="copy-code-btn" class="absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 text-gray-700 p-1.5 rounded-md text-xs">Copy</button>
                    </div>
                </div>
            </div>

            <!-- Right Panel (Visual Editor) -->
            <main class="w-2/3 flex-grow bg-gray-50">
                <svg id="visual-editor-svg" class="w-full h-full"></svg>
            </main>
        </div>
    </div>

    <script type="module">
        // --- State Management ---
        let nodes = [
            { id: 'A', text: 'Start Here', x: 150, y: 100, width: 120, height: 60 },
            { id: 'B', text: 'Go Left or Right?', x: 150, y: 250, width: 150, height: 60 },
        ];
        let links = [
            { source: 'A', target: 'B' }
        ];
        let selectedNode = null;
        let selectedLink = null;
        let isLinking = false;
        let linkStartNode = null;

        // --- D3 Setup ---
        const svg = d3.select("#visual-editor-svg");
        const width = svg.node().getBoundingClientRect().width;
        const height = svg.node().getBoundingClientRect().height;

        const linkGroup = svg.append("g").attr("class", "links");
        const nodeGroup = svg.append("g").attr("class", "nodes");
        
        svg.append("defs").append("marker")
            .attr("id", "arrowhead")
            .attr("viewBox", "-0 -5 10 10")
            .attr("refX", 19)
            .attr("refY", 0)
            .attr("orient", "auto")
            .attr("markerWidth", 8)
            .attr("markerHeight", 8)
            .attr("xoverflow", "visible")
            .append("svg:path")
            .attr("d", "M 0,-5 L 10 ,0 L 0,5")
            .attr("class", "arrowhead");

        // --- Core Functions ---
        function updateAll() {
            renderD3();
            updateMermaidCode();
        }

        function generateUniqueId() {
            return `node_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
        }

        function updateMermaidCode() {
            const codeTextArea = document.getElementById('mermaid-code');
            let code = "graph TD\n";
            nodes.forEach(node => {
                const nodeText = node.text.replace(/"/g, '#quot;');
                code += `    ${node.id}["${nodeText}"]\n`;
            });
            links.forEach(link => {
                code += `    ${link.source} --> ${link.target}\n`;
            });
            codeTextArea.value = code;
        }

        // --- D3 Rendering ---
        function updateLinkPaths() {
            const linkSelection = linkGroup.selectAll("path.link")
                .data(links, d => `${d.source}-${d.target}`)
                .join("path")
                .attr("class", "link")
                .attr("marker-end", "url(#arrowhead)");

            linkSelection.attr("d", d => {
                const sourceNode = nodes.find(n => n.id === d.source);
                const targetNode = nodes.find(n => n.id === d.target);
                if (!sourceNode || !targetNode) return "";

                const dx = targetNode.x - sourceNode.x;
                const dy = targetNode.y - sourceNode.y;
                const gamma = Math.atan2(dy, dx);
                
                const getIntersection = (node, angle) => {
                    const w = node.width / 2;
                    const h = node.height / 2;
                    const tan_gamma = Math.tan(angle);
                    let x, y;
                    if (Math.abs(h * Math.cos(angle)) > Math.abs(w * Math.sin(angle))) {
                        x = w * (Math.cos(angle) > 0 ? 1 : -1) + node.x;
                        y = w * (Math.cos(angle) > 0 ? 1 : -1) * tan_gamma + node.y;
                    } else {
                        y = h * (Math.sin(angle) > 0 ? 1 : -1) + node.y;
                        x = h * (Math.sin(angle) > 0 ? 1 : -1) / tan_gamma + node.x;
                    }
                    return { x, y };
                };
                
                const sourcePoint = getIntersection(sourceNode, gamma);
                const targetPoint = getIntersection(targetNode, gamma + Math.PI);

                return `M${sourcePoint.x},${sourcePoint.y}L${targetPoint.x},${targetPoint.y}`;
            });
        }
        
        function renderD3() {
            // This function now uses a more robust D3 pattern (enter/update/exit with merge)
            // to ensure event handlers are correctly applied to all nodes.
            
            // 1. DATA BINDING
            const nodeSelection = nodeGroup.selectAll("g.node").data(nodes, d => d.id);

            // 2. EXIT phase: remove old nodes that are no longer in the data
            nodeSelection.exit().remove();

            // 3. ENTER phase: create the group and elements for new nodes
            const nodeEnter = nodeSelection.enter().append("g").attr("class", "node");
            nodeEnter.append("rect");
            nodeEnter.append("text").attr("dy", "0.35em").attr("text-anchor", "middle");

            // 4. MERGE phase: apply attributes to both new (enter) and existing (update) nodes
            const allNodes = nodeEnter.merge(nodeSelection);
            
            allNodes
                .attr("transform", d => `translate(${d.x - d.width/2},${d.y - d.height/2})`)
                .attr("class", d => {
                    let classes = 'node';
                    if (d === selectedNode) classes += ' selected';
                    if (linkStartNode && d.id === linkStartNode.id) classes += ' linking-source';
                    return classes;
                });
            
            allNodes.select("rect")
                .attr("width", d => d.width)
                .attr("height", d => d.height);

            allNodes.select("text")
                .attr("x", d => d.width / 2)
                .attr("y", d => d.height / 2)
                .text(d => d.text);
            
            // Apply event handlers to all nodes in the merged selection
            allNodes
                .on("click", (event, d) => {
                    event.stopPropagation();
                    if (isLinking) {
                        handleLinking(d);
                    } else {
                        selectNode(d);
                    }
                })
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            // Finally, update the visual paths for the links
            updateLinkPaths();
        }

        // --- Drag Handling ---
        function dragstarted(event, d) {
            d3.select(this).raise().classed("active", true);
        }

        function dragged(event, d) {
            d.x = event.x;
            d.y = event.y;
            // Performance fix: Only update the node's transform and the link paths during drag.
            // Avoids a full re-render of all elements.
            d3.select(this).attr("transform", `translate(${d.x - d.width/2},${d.y - d.height/2})`);
            updateLinkPaths();
        }

        function dragended(event, d) {
            d3.select(this).classed("active", false);
            updateAll(); // Do a full, clean update at the end of the drag.
        }

        // --- Node & Link Management ---
        function selectNode(node) {
            selectedNode = node;
            document.getElementById('node-editor').classList.remove('hidden');
            document.getElementById('node-text').value = node.text;
            document.getElementById('node-id').value = node.id;
            updateAll();
        }

        function deselectAll() {
            selectedNode = null;
            selectedLink = null;
            document.getElementById('node-editor').classList.add('hidden');
            isLinking = false;
            linkStartNode = null;
            document.getElementById('create-link-btn').textContent = 'Create Link';
            document.getElementById('create-link-btn').classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
            document.getElementById('create-link-btn').classList.add('bg-green-500', 'hover:bg-green-600');
            svg.classed('linking-cursor', false);
            updateAll();
        }
        
        function handleLinking(targetNode) {
            if (!linkStartNode) {
                linkStartNode = targetNode;
                document.getElementById('create-link-btn').textContent = '...Select Target Node';
                updateAll();
            } else {
                if (linkStartNode.id !== targetNode.id) {
                    const linkExists = links.some(l => (l.source === linkStartNode.id && l.target === targetNode.id));
                    if (!linkExists) {
                        links.push({ source: linkStartNode.id, target: targetNode.id });
                    }
                }
                deselectAll();
            }
        }
        
        // --- Event Listeners ---
        document.getElementById('add-node-btn').addEventListener('click', () => {
            const newNode = {
                id: generateUniqueId(),
                text: 'New Node',
                x: Math.random() * (width - 200) + 100,
                y: Math.random() * (height - 100) + 50,
                width: 120,
                height: 60,
            };
            nodes.push(newNode);
            selectNode(newNode);
        });

        document.getElementById('create-link-btn').addEventListener('click', () => {
            isLinking = !isLinking;
            if (isLinking) {
                selectedNode = null;
                linkStartNode = null;
                document.getElementById('node-editor').classList.add('hidden');
                document.getElementById('create-link-btn').textContent = 'Cancel Linking';
                document.getElementById('create-link-btn').classList.remove('bg-green-500', 'hover:bg-green-600');
                document.getElementById('create-link-btn').classList.add('bg-yellow-500', 'hover:bg-yellow-600');
                svg.classed('linking-cursor', true);
                updateAll();
            } else {
                deselectAll();
            }
        });

        document.getElementById('node-text').addEventListener('input', (e) => {
            if (selectedNode) {
                selectedNode.text = e.target.value;
                updateAll();
            }
        });
        
        document.getElementById('delete-node-btn').addEventListener('click', () => {
            if (selectedNode) {
                nodes = nodes.filter(n => n.id !== selectedNode.id);
                links = links.filter(l => l.source !== selectedNode.id && l.target !== selectedNode.id);
                deselectAll();
            }
        });
        
        document.getElementById('copy-code-btn').addEventListener('click', () => {
            const codeTextArea = document.getElementById('mermaid-code');
            codeTextArea.select();
            document.execCommand('copy');
        });
        
        svg.on('click', () => {
            if (!isLinking) {
                deselectAll();
            }
        });

        // --- Initial Load ---
        updateAll();
    </script>
</body>
</html>

